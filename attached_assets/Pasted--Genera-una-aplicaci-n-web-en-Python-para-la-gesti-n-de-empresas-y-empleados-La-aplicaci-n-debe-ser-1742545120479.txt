"Genera una aplicación web en Python para la gestión de empresas y empleados. La aplicación debe ser escalable, segura y accesible desde cualquier navegador.

1. Autenticación y Seguridad:
Sistema de login con usuario y contraseña.
Un usuario administrador con permisos para gestionar usuarios.
Control de acceso basado en roles:
Admin: Gestiona usuarios, empresas y empleados.
Gerente: Gestiona empleados de su empresa.
Empleado: Solo ve su propia información.
Hashing seguro de contraseñas con bcrypt o similar.
Autenticación con JWT o sesiones seguras.
Protección contra ataques CSRF, XSS y SQL Injection.
Registro de actividad/logs para auditoría.
2. Gestión de Empresas y Empleados:
Empresas: CRUD de empresas con detalles como nombre, dirección, sector, etc.
Empleados: CRUD de empleados con una ficha que incluya:
Nombre completo, puesto, tipo de contrato, DNI, cuenta bancaria.
Botón para subir archivos (contratos, documentos).
Notas y comentarios internos.
Historial de cambios en la ficha del empleado.
Relación entre empresas y empleados:
Cada empresa tiene múltiples empleados.
Un empleado solo pertenece a una empresa.
3. Estructura Modular y Escalabilidad:
Diseño basado en módulos para permitir futuras expansiones.
Primer módulo: Gestión de empleados.
API REST para futuras integraciones con otras plataformas.
Base de datos SQL (PostgreSQL o MySQL) usando SQLAlchemy o Django ORM.
4. Accesibilidad y Usabilidad:
Accesible desde cualquier navegador con interfaz responsive.
Frontend con Bootstrap/Tailwind o framework moderno como React/Vue (opcional).
Dashboard intuitivo con estadísticas básicas (total de empleados, empresas activas, etc.).
Buscador y filtros para encontrar empleados/empresas fácilmente.
5. Extras para Mejor Experiencia:
Soporte para múltiples idiomas (i18n).
Exportación de datos a Excel/PDF.
Sistema de notificaciones (correo para cambios importantes).
Integración con almacenamiento en la nube para archivos (AWS S3, Google Drive, etc.).
Automatización de tareas repetitivas (ejemplo: recordatorio de vencimiento de contratos).
Genera el código base en Python con Flask o Django, asegurando que la arquitectura sea escalable y flexible para futuras mejoras."